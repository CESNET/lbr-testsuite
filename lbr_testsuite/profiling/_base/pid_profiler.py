"""
Author(s): Jan Viktorin <viktorin@cesnet.cz>

Copyright: (C) 2021-2024 CESNET, z.s.p.o.

Supporting code for implementing application profilers.
"""

import logging

from ...executable import executable
from .profiler import ProfiledSubject, Profiler


class PidProfiler(Profiler):
    """
    Abstract class that implements common profiler logic.
    """

    def __init__(self, cmd, logger=None, env=None):
        """
        Parameters
        ----------
        cmd : str, list or tuple
            Command to be used when executing the profiler.
        logger : logging.Logger(), optional
            Instance of logging.Logger class. If not set, class-specific
            logger is used.
        env : dict(), deprecated
            Mapping that defines environment variables for the profiler
            process.
        """

        if isinstance(cmd, list):
            self._cmd = cmd
        elif isinstance(cmd, tuple) or isinstance(cmd, str):
            self._cmd = list(cmd)
        else:
            raise RuntimeError(f"cmd is of unexpected type: {type(cmd)}")

        if logger is None:
            self._logger = logging.getLogger(type(self).__name__)
        else:
            self._logger = logger

        self._env = env
        self._daemon = None

    def _copy_cmd(self):
        """
        Returns
        -------
        list
            Copy of base command to start profiler.
        """
        return self._cmd.copy()

    def _build_cmd(self, pid):
        """Build command based on self._cmd, pid and possibly other
        profiler-dependent configuration. To be overriden by each
        implementation.

        Returns
        -------
        list
            Command to be executed as list of strings.
        """
        raise RuntimeError("_build_cmd() not implemented")

    def _create_daemon(self, cmd):
        """Create instance of Daemon that controls the profiler process.

        Returns
        -------
        executable.Daemon
            Instance of Daemon to be later executed.
        """

        return executable.Daemon(command=cmd, logger=self._logger, env=self._env)

    def start_pid(self, pid):
        """Creates daemon and starts it by using command generated by
        self._build_cmd(pid).
        """

        cmd = self._build_cmd(pid)
        self._logger.debug(f"starting profiler {cmd}")

        self._daemon = self._create_daemon(cmd)
        self._daemon.start()

    def start(self, subject: ProfiledSubject):
        """Start profiling the given subject

        Parameters
        ----------
        subject : ProfiledSubject
            Subject to be profiled.
        """

        if subject.has_pid():
            self.start_pid(subject.get_pid())
        else:
            raise Exception("failed to start profiling subject without PID")

    def stop(self):
        """Stop the underlying daemon if any."""

        if self._daemon:
            self._daemon.terminate()

    def join(self):
        """Wait for the underlying daemon to finish if any."""

        if self._daemon:
            self._daemon.wait_or_kill()
            self._daemon = None
